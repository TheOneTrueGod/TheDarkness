This is a co-op D&D style game.
Each game is a campaign that takes place over the course of several missions.
The story behind the campaign is that the world has been covered by an encroaching darkness, and only special lights can push it back.
The players are part of a caravan that has been sent into the darkness to retrieve a power source for the lights in the capital.
Each player will have 1-3 characters in the caravan, but they can only bring one along on any given mission.
Before each mission begins, the team will get to vote on which of several different missions they want to go on.  If there's a tie, a random one will be chosen.
Missions will be turn-based combat, with a 'darkness' mechanic.  Example;  Caravan moves from point A to point B on the map.  Defend it until you reach point B.


Screen flow
    - Campaign List

Campaign
  - id; int
  - Name
  - States; SETUP, ACTIVE, COMPLETE
  - 1-4 Player Ids (Can only be changed during SETUP)
  - MissionList; array <mission_id>
  - Current Mission; mission_id (int)
  - Avatars; array <avatar_id>

Mission
  - id
  - States; SETUP, ACTIVE, WON, LOST
  - Characters; array <avatar_id>
  - MissionData; JSON_DICT (map, characters, enemies, tokens)
    - Characters correspond to an avatar, but also have mid-mission stats

Avatar
    - ID
    - Type ()
    - StatUpgrades
    - AbilityUpgrades

Ideas for how battles can be managed
When a player or AI uses an abilities, it adds "actions" to an action queue.
The first action to be added is the "useAbility" action.
These actions can wind up causing other actions to be added.
The actions get resolved one by one.

For example;
A player uses an ability to move his swordsman from (2, 2) to (2, 3)
"UseAbility(swordsman, move, [(2,2), (2,3)])" gets added to the queue.
 - UseAbility<move> throws event "unit about to move out of square".
 - An adjacent wolf catches that event and adds a "UseAbility(wolf, attack, swordsman)" to retaliate
 - UseAbility<move> adds a "MoveUnit((2, 2), (2, 3))" to the queue
 - UseAbility<wolfattack> resolves.  The wolf attacks the swordsman.
 - MoveUnit resolves.  The swordsman moves.

Animations can happen as part of an action resolving, but should be distinct from the data.
The next action won't do its stuff until the animations are finished.